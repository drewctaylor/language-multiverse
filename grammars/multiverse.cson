'scopeName': 'source.multiverse'
'fileTypes': [
  'multiverse'
]
'name': 'Multiverse'
'patterns': [
  {
    'match': '([A-z][A-z0-9]*)\\s*(:=|\\+=|-=)'
    'comment': 'Match an attribute assignment.'
    'captures':
      '1':
        'name': 'identifier.attribute'
      '2':
        'name': 'reserved.operator.assignment'
  }
  # three-character operators
  {
    'match': '(\\!\\?\\=)'
    'captures':
      '1':
        'name':'reserved.operator.query'
  }
  {
    'match': '(\\+\\+\\+|\\-\\-\\-)'
    'captures':
      '1':
        'name':'reserved.operator.bounded'
  }
  {
    'match': '(<->)'
    'captures':
      '1':
        'name':'reserved.operator.delimiter'
  }
  # two-character operators
  {
    'match': '(\\?\\=)'
    'captures':
      '1':
        'name':'reserved.operator.query'
  }
  {
    'match': '(\\+\\+|\\-\\-)'
    'captures':
      '1':
        'name':'reserved.operator.ordered'
  }
  {
    'match': '(\\|\\||&&)'
    'captures':
      '1':
        'name':'reserved.operator.boolean'
  }
  {
    'match': '(==|!=)'
    'captures':
      '1':
        'name':'reserved.operator.assignment'
  }
  {
    'match': '(\\+=|-=|:=)'
    'captures':
      '1':
        'name':'reserved.operator.assignment'
  }
  {
    'match': '(<=|>=)'
    'captures':
      '1':
        'name':'reserved.operator.relational'
  }
  {
    'match': '(->)'
    'captures':
      '1':
        'name':'reserved.operator.delimiter'
  }
  # one-character operators
  {
    'match': '(!)'
    'captures':
      '1':
        'name':'reserved.operator.boolean'
  }
  {
    'match': '(#)'
    'captures':
      '1':
        'name':'reserved.operator.set'
  }
  {
    'match': '(\\*|-|\\+|/)'
    'captures':
      '1':
        'name':'reserved.operator.numeric'
  }
  {
    'match': '(<|>)'
    'captures':
      '1':
        'name':'reserved.operator.relational'
  }
  {
    'match': '(,|\\{|\\}|\\(|\\))'
    'captures':
      '1':
        'name':'reserved.operator.delimiter'
  }
  {
    'match': '(?:^|\\s+)(false|true)\\s+'
    'captures':
      '1':
        'name':'reserved.value.boolean'
  }
  {
    'match': '(?:^|\\s+)(empty)\\s+'
    'captures':
      '1':
        'name':'reserved.value.set'
  }
  {
    'match': '(subset|union|intersection|cardinality|subset|superset|difference)'
    'captures':
      '1':
        'name':'reserved.operator.set'
  }
  {
    'match': '(state|goal|story|strategy|entity)'
    'captures':
      '1':
        'name':'reserved.keyword'
  }
  {
    'match': '(minimum|maximum)'
    'captures':
      '1':
        'name':'reserved.operator.bounded'
  }
  {
    'match': '(min|max)'
    'captures':
      '1':
        'name':'reserved.operator.bounded'
  }
  {
    'match': '(or|not|and)'
    'captures':
      '1':
        'name':'reserved.operator.boolean'
  }
  {
    'match': '(decrement|increment)'
    'captures':
      '1':
        'name':'reserved.operator.ordered'
  }
  {
    'match': '("[^"]*")\\s*(\\{)'
    'captures':
      '1':
        'name': 'comment'
      '2':
        'name': 'reserved.operator.delimiter'
  }
  {
    'begin': '(")'
    'beginCaptures' :
      '1':
        'name': 'value.string'
    'contentName':'value.string'
    'patterns': [
      {
        'include': '#template'
      }
      {
      'match': '\\\\.'
      'name': 'value.escape'
      }
    ]
    'end' : '(")'
    'endCaptures' :
      '1':
        'name': 'value.string'
  }
  {
    'begin': '(~)'
    'beginCaptures' :
      '1':
        'name': 'comment'
    'contentName':'comment'
    'end' : '(~)'
    'endCaptures' :
      '1':
        'name': 'comment'
  }
  {
    'match': '([A-z][A-z0-9]*)\\s*(\\()'
    'comment': 'Match a goal.'
    'captures':
      '1':
        'name': 'identifier.goal'
      '2':
        'name': 'reserved.operator.delimiter'
  }
  {
    'match': '(\\.)([A-z][A-z0-9]*)([^\\.\\sA-z0-9])'
    'comment': 'Match an attribute.'
    'captures':
      '1':
        'name': 'keyword.operator.delimiter'
      '2':
        'name': 'identifier.attribute'
      '3':
        'name': 'keyword.operator.delimiter'
  }
  {
    'match': '(\\.)([A-z][A-z0-9]*)\\s'
    'comment': 'Match an attribute.'
    'captures':
      '1':
        'name': 'keyword.operator.delimiter'
      '2':
        'name': 'identifier.attribute'
  }
  {
    'match': '([A-z][A-z0-9]*)\\s+([A-z][A-z0-9]*)'
    'comment': 'Match a kind followed by an entity.'
    'captures':
      '1':
        'name': 'identifier.kind'
      '2':
        'name': 'identifier.entity'
  }
  {
    'match': '([A-z][A-z0-9]*)'
    'comment': 'Match an entity.'
    'captures':
      '1':
        'name': 'identifier.entity'
  }
  {
    'match': '(([0-9]*\\.)?([0-9]+))'
    'comment': 'Match a number.'
    'captures':
      '1':
        'name': 'value.numeric'
  }
]
'repository':
  'template':
    'patterns': [
      {
        'begin': '(\\{\\{)'
        'beginCaptures' :
          '1':
            'name': 'reserved.operator.delimiter'
        'contentName':'template'
        'patterns': [
          {
          'include': '#attribute'
          }
        ]
        'end' : '(\\}\\})'
        'endCaptures' :
          '1':
            'name': 'reserved.operator.delimiter'
      }
    ]
  'attribute':
    'patterns': [
      {
        'match': '([A-z][A-z0-9]*)(\\.)'
        'comment': 'Match an entity.'
        'captures':
          '1':
            'name': 'identifier.entity'
          '2':
            'name': 'keyword.operator.delimiter'
      }
      {
        'match': '([A-z][A-z0-9]*)'
        'comment': 'Match an attribute.'
        'captures':
          '1':
            'name': 'identifier.attribute'
      }
    ]
